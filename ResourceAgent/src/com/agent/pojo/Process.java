/**
 * 
 */
package com.agent.pojo;

/**
 * The details regarding one process
 * 
 * @author alexandru.popescu
 *
 */
public class Process {
	
	/*
	 * The name of the process.
	 */
	private String processName;
	
	/*
	 * ID Process is the unique identifier of this process. ID Process numbers are reused, so they only identify a process for the lifetime of that process.
	 */
	private Long pid;
	
	/*
	 * The Creating Process ID value is the Process ID of the process that created the process. The creating process may have terminated, so this value may no longer identify a running process.
	 */
	private Long parentPID;
	
	/*
	 * The number of threads currently active in this process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes instructions. Every running process has at least one thread.
	 */
	private Long threadCount;
	
	/*
	 * The total number of handles currently open by this process. This number is equal to the sum of the handles currently open by each thread in this process.
	 */
	private Long handleCount;
	
	/*
	 * % Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode. When a Windows system service is called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.
	 */
	private Double privilegedTime;
	
	/*
	 * % Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.
	 */
	private Double processorTime;
	
	/*
	 * % User Time is the percentage of elapsed time that the process threads spent executing code in user mode. Applications, environment subsystems, and integral subsystems execute in user mode. Code executing in user mode cannot damage the integrity of the Windows executive, kernel, and device drivers. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.
	 */
	private Double userTime;
	
	/*
	 * The total elapsed time, in seconds, that this process has been running.
	 */
	private Long elapsedSecondsSinceStart;
	
	/*
	 * The rate at which the process is reading and writing bytes in I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
	 */
	private Long ioDataBytesPerSec;
	
	/*
	 * The rate at which the process is issuing read and write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
	 */
	private Long ioDataOperationsPerSec;
	
	/*
	 * The rate at which the process is issuing bytes to I/O operations that do not involve data such as control operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
	 */
	private Long ioOtherBytesPerSec;
	
	/*
	 * The rate at which the process is issuing I/O operations that are neither read nor write operations (for example, a control function). This counter counts all I/O activity generated by the process to include file, network and device I/Os.
	 */
	private Long ioOtherOperationsPerSec;
	
	/*
	 * The rate at which the process is reading bytes from I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
	 */
	private Long ioReadBytesPerSec;
	
	/*
	 * The rate at which the process is issuing read I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
	 */
	private Long ioReadOperationsPerSec;
	
	/*
	 * The rate at which the process is writing bytes to I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
	 */
	private Long ioWriteBytesPerSec;
	
	/*
	 * The rate at which the process is issuing write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
	 */
	private Long ioWriteOperationsPerSec;
	
	/*
	 * Page Faults/sec is the rate at which page faults by the threads executing in this process are occurring.  A page fault occurs when a thread refers to a virtual memory page that is not in its working set in main memory. This may not cause the page to be fetched from disk if it is on the standby list and hence already in main memory, or if it is in use by another process with whom the page is shared.
	 */
	private Long pageFaultsPerSec;
	
	/*
	 * Page File Bytes is the current amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the current amount of virtual memory that the process has reserved for use in physical memory.
	 */
	private Long pageFileBytes;
	
	/*
	 * Page File Bytes Peak is the maximum amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files.  Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the maximum amount of virtual memory that the process has reserved for use in physical memory.
	 */
	private Long pageFileBytesPeak;
	
	/*
	 * Pool Nonpaged Bytes is the size, in bytes, of the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated.  Memory\\Pool Nonpaged Bytes is calculated differently than Process\\Pool Nonpaged Bytes, so it might not equal Process\\Pool Nonpaged Bytes\\_Total.  This counter displays the last observed value only; it is not an average.
	 */
	private Long poolNonpagedBytes;
	
	/*
	 * Pool Paged Bytes is the size, in bytes, of the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used.  Memory\\Pool Paged Bytes is calculated differently than Process\\Pool Paged Bytes, so it might not equal Process\\Pool Paged Bytes\\_Total. This counter displays the last observed value only; it is not an average.
	 */
	private Long poolPagedBytes;
	
	/*
	 * The current base priority of this process. Threads within a process can raise and lower their own base priority relative to the process' base priority.
	 * Base priority values: 24 - Realtime, 13 - High, 10 - Above Normal, 8 - Normal, 6 - Below Normal, 4 - Low, 0 - N/A
	 */
	private Long priorityBase;
	
	/*
	 * Private Bytes is the current size, in bytes, of memory that this process has allocated that cannot be shared with other processes.
	 */
	private Long privateBytes;
	
	/*
	 * Virtual Bytes is the current size, in bytes, of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and the process can limit its ability to load libraries.
	 */
	private Long virtualBytes;
	
	/*
	 * Virtual Bytes Peak is the maximum size, in bytes, of virtual address space the process has used at any one time. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. However, virtual space is finite, and the process might limit its ability to load libraries.
	 */
	private Long virtualBytesPeak;
	
	/*
	 * Working Set is the current size, in bytes, of the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use.  When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before leaving main memory.
	 */
	private Long workingSet;
	
	/*
	 * Working Set - Private displays the size of the working set, in bytes, that is use for this process only and not shared nor sharable by other processes.
	 */
	private Long privateWorkingSet;
	
	/*
	 * Working Set Peak is the maximum size, in bytes, of the Working Set of this process at any point in time. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.
	 */
	private Long workingSetPeak;

	/**
	 * @return the processName
	 */
	public String getProcessName() {
		return processName;
	}

	/**
	 * @param processName the processName to set
	 */
	public void setProcessName(String processName) {
		this.processName = processName;
	}

	/**
	 * @return the pid
	 */
	public Long getPid() {
		return pid;
	}

	/**
	 * @param pid the pid to set
	 */
	public void setPid(Long pid) {
		this.pid = pid;
	}

	/**
	 * @return the parentPID
	 */
	public Long getParentPID() {
		return parentPID;
	}

	/**
	 * @param parentPID the parentPID to set
	 */
	public void setParentPID(Long parentPID) {
		this.parentPID = parentPID;
	}

	/**
	 * @return the threadCount
	 */
	public Long getThreadCount() {
		return threadCount;
	}

	/**
	 * @param threadCount the threadCount to set
	 */
	public void setThreadCount(Long threadCount) {
		this.threadCount = threadCount;
	}

	/**
	 * @return the handleCount
	 */
	public Long getHandleCount() {
		return handleCount;
	}

	/**
	 * @param handleCount the handleCount to set
	 */
	public void setHandleCount(Long handleCount) {
		this.handleCount = handleCount;
	}

	/**
	 * @return the privilegedTime
	 */
	public Double getPrivilegedTime() {
		return privilegedTime;
	}

	/**
	 * @param privilegedTime the privilegedTime to set
	 */
	public void setPrivilegedTime(Double privilegedTime) {
		this.privilegedTime = privilegedTime;
	}

	/**
	 * @return the processorTime
	 */
	public Double getProcessorTime() {
		return processorTime;
	}

	/**
	 * @param processorTime the processorTime to set
	 */
	public void setProcessorTime(Double processorTime) {
		this.processorTime = processorTime;
	}

	/**
	 * @return the userTime
	 */
	public Double getUserTime() {
		return userTime;
	}

	/**
	 * @param userTime the userTime to set
	 */
	public void setUserTime(Double userTime) {
		this.userTime = userTime;
	}

	/**
	 * @return the elapsedSecondsSinceStart
	 */
	public Long getElapsedSecondsSinceStart() {
		return elapsedSecondsSinceStart;
	}

	/**
	 * @param elapsedSecondsSinceStart the elapsedSecondsSinceStart to set
	 */
	public void setElapsedSecondsSinceStart(Long elapsedSecondsSinceStart) {
		this.elapsedSecondsSinceStart = elapsedSecondsSinceStart;
	}

	/**
	 * @return the ioDataBytesPerSec
	 */
	public Long getIoDataBytesPerSec() {
		return ioDataBytesPerSec;
	}

	/**
	 * @param ioDataBytesPerSec the ioDataBytesPerSec to set
	 */
	public void setIoDataBytesPerSec(Long ioDataBytesPerSec) {
		this.ioDataBytesPerSec = ioDataBytesPerSec;
	}

	/**
	 * @return the ioDataOperationsPerSec
	 */
	public Long getIoDataOperationsPerSec() {
		return ioDataOperationsPerSec;
	}

	/**
	 * @param ioDataOperationsPerSec the ioDataOperationsPerSec to set
	 */
	public void setIoDataOperationsPerSec(Long ioDataOperationsPerSec) {
		this.ioDataOperationsPerSec = ioDataOperationsPerSec;
	}

	/**
	 * @return the ioOtherBytesPerSec
	 */
	public Long getIoOtherBytesPerSec() {
		return ioOtherBytesPerSec;
	}

	/**
	 * @param ioOtherBytesPerSec the ioOtherBytesPerSec to set
	 */
	public void setIoOtherBytesPerSec(Long ioOtherBytesPerSec) {
		this.ioOtherBytesPerSec = ioOtherBytesPerSec;
	}

	/**
	 * @return the ioOtherOperationsPerSec
	 */
	public Long getIoOtherOperationsPerSec() {
		return ioOtherOperationsPerSec;
	}

	/**
	 * @param ioOtherOperationsPerSec the ioOtherOperationsPerSec to set
	 */
	public void setIoOtherOperationsPerSec(Long ioOtherOperationsPerSec) {
		this.ioOtherOperationsPerSec = ioOtherOperationsPerSec;
	}

	/**
	 * @return the ioReadBytesPerSec
	 */
	public Long getIoReadBytesPerSec() {
		return ioReadBytesPerSec;
	}

	/**
	 * @param ioReadBytesPerSec the ioReadBytesPerSec to set
	 */
	public void setIoReadBytesPerSec(Long ioReadBytesPerSec) {
		this.ioReadBytesPerSec = ioReadBytesPerSec;
	}

	/**
	 * @return the ioReadOperationsPerSec
	 */
	public Long getIoReadOperationsPerSec() {
		return ioReadOperationsPerSec;
	}

	/**
	 * @param ioReadOperationsPerSec the ioReadOperationsPerSec to set
	 */
	public void setIoReadOperationsPerSec(Long ioReadOperationsPerSec) {
		this.ioReadOperationsPerSec = ioReadOperationsPerSec;
	}

	/**
	 * @return the ioWriteBytesPerSec
	 */
	public Long getIoWriteBytesPerSec() {
		return ioWriteBytesPerSec;
	}

	/**
	 * @param ioWriteBytesPerSec the ioWriteBytesPerSec to set
	 */
	public void setIoWriteBytesPerSec(Long ioWriteBytesPerSec) {
		this.ioWriteBytesPerSec = ioWriteBytesPerSec;
	}

	/**
	 * @return the ioWriteOperationsPerSec
	 */
	public Long getIoWriteOperationsPerSec() {
		return ioWriteOperationsPerSec;
	}

	/**
	 * @param ioWriteOperationsPerSec the ioWriteOperationsPerSec to set
	 */
	public void setIoWriteOperationsPerSec(Long ioWriteOperationsPerSec) {
		this.ioWriteOperationsPerSec = ioWriteOperationsPerSec;
	}

	/**
	 * @return the pageFaultsPerSec
	 */
	public Long getPageFaultsPerSec() {
		return pageFaultsPerSec;
	}

	/**
	 * @param pageFaultsPerSec the pageFaultsPerSec to set
	 */
	public void setPageFaultsPerSec(Long pageFaultsPerSec) {
		this.pageFaultsPerSec = pageFaultsPerSec;
	}

	/**
	 * @return the pageFileBytes
	 */
	public Long getPageFileBytes() {
		return pageFileBytes;
	}

	/**
	 * @param pageFileBytes the pageFileBytes to set
	 */
	public void setPageFileBytes(Long pageFileBytes) {
		this.pageFileBytes = pageFileBytes;
	}

	/**
	 * @return the pageFileBytesPeak
	 */
	public Long getPageFileBytesPeak() {
		return pageFileBytesPeak;
	}

	/**
	 * @param pageFileBytesPeak the pageFileBytesPeak to set
	 */
	public void setPageFileBytesPeak(Long pageFileBytesPeak) {
		this.pageFileBytesPeak = pageFileBytesPeak;
	}

	/**
	 * @return the poolNonpagedBytes
	 */
	public Long getPoolNonpagedBytes() {
		return poolNonpagedBytes;
	}

	/**
	 * @param poolNonpagedBytes the poolNonpagedBytes to set
	 */
	public void setPoolNonpagedBytes(Long poolNonpagedBytes) {
		this.poolNonpagedBytes = poolNonpagedBytes;
	}

	/**
	 * @return the poolPagedBytes
	 */
	public Long getPoolPagedBytes() {
		return poolPagedBytes;
	}

	/**
	 * @param poolPagedBytes the poolPagedBytes to set
	 */
	public void setPoolPagedBytes(Long poolPagedBytes) {
		this.poolPagedBytes = poolPagedBytes;
	}

	/**
	 * @return the priorityBase
	 */
	public Long getPriorityBase() {
		return priorityBase;
	}

	/**
	 * @param priorityBase the priorityBase to set
	 */
	public void setPriorityBase(Long priorityBase) {
		this.priorityBase = priorityBase;
	}

	/**
	 * @return the privateBytes
	 */
	public Long getPrivateBytes() {
		return privateBytes;
	}

	/**
	 * @param privateBytes the privateBytes to set
	 */
	public void setPrivateBytes(Long privateBytes) {
		this.privateBytes = privateBytes;
	}

	/**
	 * @return the virtualBytes
	 */
	public Long getVirtualBytes() {
		return virtualBytes;
	}

	/**
	 * @param virtualBytes the virtualBytes to set
	 */
	public void setVirtualBytes(Long virtualBytes) {
		this.virtualBytes = virtualBytes;
	}

	/**
	 * @return the virtualBytesPeak
	 */
	public Long getVirtualBytesPeak() {
		return virtualBytesPeak;
	}

	/**
	 * @param virtualBytesPeak the virtualBytesPeak to set
	 */
	public void setVirtualBytesPeak(Long virtualBytesPeak) {
		this.virtualBytesPeak = virtualBytesPeak;
	}

	/**
	 * @return the workingSet
	 */
	public Long getWorkingSet() {
		return workingSet;
	}

	/**
	 * @param workingSet the workingSet to set
	 */
	public void setWorkingSet(Long workingSet) {
		this.workingSet = workingSet;
	}

	/**
	 * @return the privateWorkingSet
	 */
	public Long getPrivateWorkingSet() {
		return privateWorkingSet;
	}

	/**
	 * @param privateWorkingSet the privateWorkingSet to set
	 */
	public void setPrivateWorkingSet(Long privateWorkingSet) {
		this.privateWorkingSet = privateWorkingSet;
	}

	/**
	 * @return the workingSetPeak
	 */
	public Long getWorkingSetPeak() {
		return workingSetPeak;
	}

	/**
	 * @param workingSetPeak the workingSetPeak to set
	 */
	public void setWorkingSetPeak(Long workingSetPeak) {
		this.workingSetPeak = workingSetPeak;
	}

	/**
	 * Constructor for Process class.
	 */
	public Process() {
		super();
	}
}

